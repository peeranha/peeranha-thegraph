type User @entity {
  id: ID!
  ratings: [UserCommunityRating!]!
  displayName: String
  postCount: Int
  replyCount: Int
  company: String
  position: String
  location: String
  about: String
  avatar: String
  creationTime: BigInt
  ipfsHash: Bytes
  ipfsHash2: Bytes
  followedCommunities: [String!]!
  achievements: [Achievement!]!
  posts: [String!]!
  replies: [String!]!
  comments: [String!]!
}

type UserCommunityRating @entity {
  id: ID!
  communityId: String
  rating: Int
  user: User
}

type UserPermission @entity {
  id: ID!
  user: User
  permission: String
}

type UserCommunityBan @entity {
  id: ID!
  user: User
  communityId: String
}

type Community @entity {
  id: ID!
  name: String
  description: String
  website: String
  communitySite: String
  avatar: String
  isFrozen: Boolean
  creationTime: BigInt
  postCount: Int
  documentationCount: Int
  deletedPostCount: Int
  replyCount: Int
  tagsCount: Int
  followingUsers: Int
  ipfsHash: Bytes
  ipfsHash2: Bytes
  language: String
  translations: [CommunityTranslation!]!
  networkId: Int!
}

type CommunityTranslation @entity {
  id: ID!
  communityId: String
  name: String
  description: String
  language: String
  enableAutotranslation: Boolean
}

type Tag @entity {
  id: ID!
  communityId: String
  name: String!
  description: String
  postCount: Int
  deletedPostCount: Int
  ipfsHash: Bytes
  ipfsHash2: Bytes
  language: String
  translations: [TagTranslation!]!
}

type TagTranslation @entity {
  id: ID!
  tagId: String
  name: String!
  description: String
  language: String
}

type _Schema_
@fulltext(
  name: "postSearch"
  language: en
  algorithm: rank
  include: [{entity: "Post", fields: [{ name: "title" }, { name: "content"}, { name: "postContent"}]}]        
)

type Post @entity {
  id: ID!
  ipfsHash: Bytes
  ipfsHash2: Bytes
  postType: Int
  author: User!
  rating: Int
  postTime: BigInt
  lastmod: BigInt
  communityId: String!
  title: String!
  content: String!
  postContent: String!
  commentCount: Int
  replyCount: Int
  isDeleted: Boolean
  officialReply: Int
  bestReply: Int
  isFirstReply: Boolean
  isQuickReply: Boolean
  properties: [BigInt!]
  replies: [Reply!]!
  comments: [Comment!]!
  language: Int
  translations: [PostTranslation!]!
  tags: [Tag!]!
  handle: String
  messengerType: Int
  networkId: Int!
}

type PostTranslation @entity {
  id: ID!
  postId: String
  language: Int
  author: User
  ipfsHash: Bytes
  title: String!
  content: String!
}

type Reply @entity {
  id: ID!
  ipfsHash: Bytes
  ipfsHash2: Bytes
  author: User!
  rating: Int
  postTime: BigInt
  postId: String!
  parentReplyId: Int
  content: String!
  commentCount: Int
  isDeleted: Boolean
  isOfficialReply: Boolean
  isBestReply: Boolean
  isFirstReply: Boolean
  isQuickReply: Boolean
  properties: [Bytes!]
  comments: [Comment!]!
  language: Int
  translations: [ReplyTranslation!]!
  handle: String
  messengerType: Int
}

type ReplyTranslation @entity {
  id: ID!
  replyId: String
  language: Int
  author: User
  ipfsHash: Bytes
  content: String!
}

type Comment @entity {
  id: ID!
  ipfsHash: Bytes
  ipfsHash2: Bytes
  author: User!
  rating: Int
  postTime: BigInt
  postId: String!
  parentReplyId: Int
  content: String!
  isDeleted: Boolean
  properties: [Bytes!]
  language: Int
  translations: [CommentTranslation!]!
}

type CommentTranslation @entity {
  id: ID!
  commentId: String
  language: Int
  author: User
  ipfsHash: Bytes
  content: String!
}

type Achievement @entity {
  id: ID!
  factCount: BigInt
  maxCount: BigInt
  lowerValue: BigInt
  achievementURI: String!
  achievementsType: Int
  name: String
  description: String
  image: String
  communityId: String
  attrCommunityId: String
  attrEvent: String
  attrType: String
}

type UserReward @entity {
  id: ID!
  period: Period
  user: User
  tokenToReward: BigInt
  isPaid: Boolean
}

type Period @entity {
  id: ID!
  startPeriodTime: BigInt
  endPeriodTime: BigInt
  isFinished: Boolean
}

type ContractInfo @entity {
  id: ID!
  deployTime: BigInt!
  periodLength: BigInt!
  lastUpdatePeriod: Int!
}

type History @entity {
  id: ID!
  transactionHash: Bytes
  post: Post
  reply: Reply
  comment: Comment
  eventEntity: String
  eventName: String
  actionUser: User
  timeStamp: BigInt
}

type CommunityDocumentation @entity {
  id: ID!
  documentationJson: String
  ipfsHash: Bytes
}

type Statistic @entity {
  id: ID!
  actionUser: String
  transactionHash: Bytes
  timeStamp: BigInt
  eventName: String
  communityId: String
  postId: BigInt
  replyId: Int
  commentId: Int
  voteDirection: Int
  status: Boolean
  network: String
}